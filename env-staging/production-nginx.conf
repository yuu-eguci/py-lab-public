# NOTE: この nginx.conf は、
#       80 -> 443
#       443 -> www.mrrhp.com または staging.www.mrrhp.com のモデルとして用意した。

# IP アクセスとか、 www.mrrhp.com と staging.www.mrrhp.com 以外のアクセスを拒否するための設定です。
server {
    listen 80;
    server_name _;
    return 444;
}

# 同じく。
server {
    listen 443;
    server_name _;
    return 444;

    # こっちにもこれ↓が必要。
    ssl_certificate /etc/letsencrypt/live/www.mrrhp.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.mrrhp.com/privkey.pem;
}

server {
    # nginx は 80 で動作。 (そのままインターネットへ。)
    # 80番ポートでのリクエストを全て HTTPS へリダイレクト。
    listen 80;
    server_name www.mrrhp.com;
    return 301 https://$host$request_uri;
}

server {
    # HTTPS の設定
    listen 443 ssl;
    server_name www.mrrhp.com;

    # SSL 証明書と秘密鍵のパス
    ssl_certificate /etc/letsencrypt/live/www.mrrhp.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.mrrhp.com/privkey.pem;

    # 以下 SSL の推奨設定
    # SSL/TLS プロトコルのバージョンを指定。古いバージョンの TLS はセキュリティリスクがあるため、TLSv1.2 と TLSv1.3 のみを使用。
    ssl_protocols TLSv1.2 TLSv1.3;
    # サーバーがクライアントの暗号スイート (暗号化アルゴリズムの組み合わせ) よりも優先して、サーバーの設定した暗号スイートを使うようにする設定。
    ssl_prefer_server_ciphers on;
    # 使用する暗号スイートを指定。強力な暗号化を保証するものを選んでいる。
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM";
    # 楕円曲線暗号で使用する曲線を指定。x25519 と secp256r1 は高速かつ安全な選択肢。
    ssl_ecdh_curve x25519:secp256r1:secp384r1;
    # SSL セッション情報をキャッシュすることで、同じクライアントからの再接続時にセッションを再利用し、パフォーマンスを向上させる。
    # `shared:SSL:10m` はキャッシュの名前 (SSL) と保存時間 (10分間) を指定している。
    ssl_session_cache shared:SSL:10m;

    # HSTS (HTTP Strict Transport Security) ヘッダーを設定して、ブラウザが次回からこのサイトにアクセスする際に HTTPS を強制する。
    # `max-age=31536000` で有効期限を1年間に設定し、`includeSubDomains` で全サブドメインに対しても適用させる。
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Alias 設定
    location = /robots.txt {
        alias /var/www/mrrhp-apache/src/staticfiles/robots.txt;
        access_log off;
    }

    location = /sitemap_index.xml {
        alias /var/www/mrrhp-apache/src/staticfiles/sitemap_index.xml;
        access_log off;
    }

    location = /sitemap_static.xml {
        alias /var/www/mrrhp-apache/src/staticfiles/sitemap_static.xml;
        access_log off;
    }

    # アクセスを Docker で動いている Django へ。
    location / {
        proxy_pass http://localhost:8901;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # /static/ パスから静的ファイルを配信
    location /static/ {
        alias /var/www/mrrhp-apache/src/staticfiles/;
        expires 30d;
        access_log off;

        # gzip 設定
        gzip on;
        gzip_types image/jpeg image/png image/gif image/webp text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        # 全てのプロキシレスポンスを圧縮する。
        gzip_proxied any;
        # レスポンスヘッダーに Vary: Accept-Encoding を追加する。
        gzip_vary on;
    }

    # /media/ パスからメディアファイルを配信
    location /media/ {
        alias /var/www/mrrhp-apache/src/media/;
        expires 30d;
        access_log off;

        # gzip 設定
        gzip on;
        gzip_types image/jpeg image/png image/gif image/webp;
        # 全てのプロキシレスポンスを圧縮する。
        gzip_proxied any;
        # レスポンスヘッダーに Vary: Accept-Encoding を追加する。
        gzip_vary on;
    }
}

server {
    # 80番ポートでのリクエストを全て HTTPS へリダイレクト。
    listen 80;
    server_name staging.www.mrrhp.com;
    return 301 https://$host$request_uri;
}

server {
    # HTTPS の設定
    listen 443 ssl;
    server_name staging.www.mrrhp.com;

    # SSL 証明書と秘密鍵のパス
    ssl_certificate /etc/letsencrypt/live/staging.www.mrrhp.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/staging.www.mrrhp.com/privkey.pem;

    # 以下 SSL の推奨設定
    # SSL/TLS プロトコルのバージョンを指定。古いバージョンの TLS はセキュリティリスクがあるため、TLSv1.2 と TLSv1.3 のみを使用。
    ssl_protocols TLSv1.2 TLSv1.3;
    # サーバーがクライアントの暗号スイート (暗号化アルゴリズムの組み合わせ) よりも優先して、サーバーの設定した暗号スイートを使うようにする設定。
    ssl_prefer_server_ciphers on;
    # 使用する暗号スイートを指定。強力な暗号化を保証するものを選んでいる。
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM";
    # 楕円曲線暗号で使用する曲線を指定。x25519 と secp256r1 は高速かつ安全な選択肢。
    ssl_ecdh_curve x25519:secp256r1:secp384r1;
    # SSL セッション情報をキャッシュすることで、同じクライアントからの再接続時にセッションを再利用し、パフォーマンスを向上させる。
    # `shared:SSL:10m` はキャッシュの名前 (SSL) と保存時間 (10分間) を指定している。
    ssl_session_cache shared:SSL:10m;

    # HSTS (HTTP Strict Transport Security) ヘッダーを設定して、ブラウザが次回からこのサイトにアクセスする際に HTTPS を強制する。
    # `max-age=31536000` で有効期限を1年間に設定し、`includeSubDomains` で全サブドメインに対しても適用させる。
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # アクセスを React アプリケーションへ。
    location / {
        alias /var/www/mrrhp-apache/frontend-react/dist/;
        try_files $uri /index.html;
        access_log off;

        # gzip 設定
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        # 全てのプロキシレスポンスを圧縮する。
        gzip_proxied any;
        # レスポンスヘッダーに Vary: Accept-Encoding を追加する。
        gzip_vary on;
    }
}
