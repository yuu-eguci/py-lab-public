"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import logging
import os
from pathlib import Path

from shared.logging_formatters import JSTFormatter

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS: list[str] = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    # NOTE: 本リポジトリでは、本番環境では backend, frontend で共通ドメインを使うことを想定している。
    #       だから django-cors-headers は [dev-packages] に入れています。
    #       本番環境を作るときは本番用の settings を作ってください。
    'corsheaders',
]

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'shared.exception_handlers.custom_exception_handler',
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'middlewares.request_id_middleware.RequestIDMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ['MYSQL_DATABASE'],
        'USER': os.environ['MYSQL_USER'],
        'PASSWORD': os.environ['MYSQL_PASSWORD'],
        'HOST': os.environ['MYSQL_HOSTNAME'],
        'PORT': os.environ['MYSQL_PORT'],
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3001',
]


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        # ログのフォーマットを指定。
        # とりあえず ISO 8601 形式の JST 時刻で出力する。
        'standard': {
            '()': JSTFormatter,
            'format': '[%(asctime)s] [%(name)s] [%(levelname)s] %(message)s',
            # NOTE: %z では ISO 8601 基本形式の +0900 になっちゃう。
            'datefmt': '%Y-%m-%dT%H:%M:%S+09:00',
            # 'datefmt': '%Y-%m-%dT%H:%M:%SZ',
        },
    },
    # 出力先ごとの設定。
    'handlers': {
        # コンソール出力用のハンドラ。 standard format を StreamHandler で使う。
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        # ファイル出力用のハンドラ。 standard format を TimedRotatingFileHandler で使う。
        # 1日ごとにログファイルをローテーション。30日まで保存。
        'file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'application.log'),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'formatter': 'standard',
            # NOTE: システムロケールが en-us だと、マルチバイト文字が出力されないことがあった。
            'encoding': 'utf-8',
        },
    },
    'loggers': {
        # 開発サーバで見るようなログを出力しているロガー。
        # こういうログを出力しているもの↓
        # [05/Oct/2023 00:30:20] "POST /ocr/images/analyze HTTP/1.1" 400 82
        # django.server は、 console handler の class, format で出力する、という設定。
        'django.server': {
            'handlers': ['console', 'file'],
            'level': logging.INFO,
        },
        # ルートロガーの設定。
        # root は、 console handler の class, format で出力する、という設定。
        'root': {
            'handlers': ['console', 'file'],
            'level': logging.INFO,
        },
    },
}
